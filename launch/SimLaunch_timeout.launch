<launch>
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="x_pos" default="0.0"/>
  <arg name="y_pos" default="0.0"/>
  <arg name="z_pos" default="0.0"/>
  <!-- <arg name="use_dijkstra" default="true"/> -->

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find botpackage)/worlds/Bainer_Hall_FP.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="false"/> <!--> probably turn this false when we run full sim <-->
    <arg name="headless" value="true"/> <!--> probably turn this true when we run full sim <-->
    <arg name="debug" value="false"/>
  </include>

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find botpackage)/urdf/turtlebot3_$(arg model).urdf.xacro" />
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model turtlebot3 -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />  
  <node name="timeout_waypoint_goal" pkg="botpackage" type="waypoint_timeout.py"/>

  <node pkg="rosbag" type="record" name="rosbagger"
    args="record -o $(find botpackage)/bag/ /odom /move_base/result /move_base/goal"/>



<!-- NEW_TURTLEBOT3_NAVIGATION.LAUNCH EQUVALENT  --> 
<!-- Arguments -->
  <arg name="map_file" default="$(find botpackage)/maps/map.yaml"/>
  <arg name="open_rviz" default="true"/>
  <arg name="move_forward_only" default="false"/>

<!-- Turtlebot3_remote.launch equivalent -->
  <arg name="multi_robot_name" default=""/>
  
  <arg name="urdf_file" default="$(find xacro)/xacro --inorder '$(find botpackage)/urdf/turtlebot3_$(arg model).urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />
  
  
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" value="$(arg multi_robot_name)"/>
  </node>
  
  
  <!-- Map server -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>

  <!-- AMCL -->
  <include file="$(find turtlebot3_navigation)/launch/amcl.launch"/>

  
  <!-- rviz -->
  <group if="$(arg open_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find turtlebot3_navigation)/rviz/turtlebot3_navigation.rviz"/>
  </group>
  
  

<!-- MOVE BASE LAUNCH EQUVALENT   --> 

 <!-- Arguments -->
 
 
  <arg name="cmd_vel_topic" default="/cmd_vel" />
  <arg name="odom_topic" default="odom" />

  <!-- move_base -->

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="log">
    <param name="base_global_planner" value="global_planner/GlobalPlanner" />  
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <!-- <param name="/GlobalPlanner/use_dijkstra" value="$(arg )"/> --> 
    <param name="/GlobalPlanner/use_dijkstra" value="$(env USE_DIJKSTRA)"/>
    <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
    <rosparam file="$(find botpackage)/param/global_planner_param.yaml" />    
    <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
    <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
  </node>

 <!-- <node pkg="botpackage" type="resetParam.py" name="resetParam" output="screen" />   -->





	
</launch>
